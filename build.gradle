apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'war'

repositories {
    mavenCentral()
}

defaultTasks 'clean', 'idea', 'setup_database', 'test', 'devWar', 'assemble', 'deploy'

ant.importBuild 'build.xml'

sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDir 'test'
        }
    }
    functionalTest {
        java {
            srcDir 'functional-test'
        }
    }
}
project.ext {
    springVersion = "3.0.5.RELEASE"
    springSecurityVersion = "3.0.2.RELEASE"
    springSecurityCasVersion = "3.1.0.RELEASE"
    casClientVersion = "3.1.3"
}

def environments = [
    dev: [protocol: "http", port: 9090, hostName: "localhost", applicationName: "smartpool"],
    qa: [protocol: "http", port: 9090, hostName: "10.10.15.121", applicationName: "smartpool-test"],
    uat: [protocol: "http", port: 9090, hostName: "10.10.15.121", applicationName: "smartpool"]
]

environments.each{env, settings ->
    task "${env}War"(type:War){
        from 'web'
        baseName environments[env].applicationName
        eachFile {
            if (it.name == 'web.xml') {
                def path  = String.format("%s://%s:%s/%s", settings.protocol, settings.hostName, settings.port, settings.applicationName)
                it.expand(smartpoolServerName: path)
            }
        }
    }
}

dependencies {

    compile "org.springframework:spring-tx:$project.springVersion",
            "org.springframework:spring-orm:$project.springVersion",
            "org.springframework:spring-jdbc:$project.springVersion",
            "org.springframework:spring-webmvc:$project.springVersion",
            "org.springframework.security:spring-security-web:$project.springSecurityVersion",
            "org.springframework.security:spring-security-config:$project.springSecurityVersion",
            "org.springframework.security:spring-security-core:$project.springSecurityVersion",
            "org.springframework.security:spring-security-cas:$project.springSecurityCasVersion",
            "javax.servlet:servlet-api:2.5",
            "org.mybatis:mybatis:3.1.1",
            "mysql:mysql-connector-java:5.1.21",
            "org.jasig.cas:cas-client-core:$project.casClientVersion",
            "joda-time:joda-time:2.1",
            "javax.servlet:jstl:1.2",
            "commons-codec:commons-codec:1.4",
            "commons-logging:commons-logging:1.1",
            "org.apache.santuario:xmlsec:1.4.0",
            "log4j:log4j:1.2.17",
            "org.opensaml:opensaml:1.1",
            "cas:casclient:2.0.11"

    testCompile "junit:junit:4.10",
            "org.mockito:mockito-core:1.8.4",
            "org.seleniumhq.selenium:selenium-java:2.24.1"

    functionalTestCompile "junit:junit:4.10",
            "org.mockito:mockito-core:1.8.4",
            "org.seleniumhq.selenium:selenium-java:2.24.1"
}

// create a task in gradle to read user, password from property, execute mysql command with SmartPoolDB.sql so that it populates the DB
task setup_database << {
    ant.exec(executable: "dbscripts/dbsetup.sh", failifexecutionfails: "true", failonerror: "true")
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
}


