apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'war'

repositories {
    mavenCentral()
}

defaultTasks 'clean', 'idea', 'setup_database', 'test', 'assemble', 'install', 'functionalTest'

if (System.getenv('SMARTPOOL_ENV') == 'qa' || System.getenv('SMARTPOOL_ENV') == 'uat') {
    println("START: Copying of " + System.getenv('SMARTPOOL_ENV') + ".properties")
    ant.copy(file: "src/main/resources/" + System.getenv('SMARTPOOL_ENV') + ".properties", tofile: "src/main/resources/app.properties", overwrite: true)
    println("END: Copying of " + System.getenv('SMARTPOOL_ENV') + ".properties")
}

ant.importBuild 'build.xml'

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src/resources'
        }
    }
    test {
        java {
            srcDir 'test'
            exclude 'smartpool/functional/**'
        }
    }
    functionalTest {
        java {
            srcDir 'test/smartpool/functional'
            srcDir 'test/smartpool/util/matchers'
        }
    }
}

project.ext {
    springVersion = "3.0.5.RELEASE"
    springSecurityVersion = "3.0.2.RELEASE"
    springSecurityCasVersion = "3.1.0.RELEASE"
    casClientVersion = "3.1.3"
    appProperties = new Properties()
    new File("src/main/resources/app.properties").withInputStream {
        stream -> appProperties.load(stream)
    }
}

war {
    from 'web'
    baseName appProperties['applicationName']
}

task prepareTomcat {
    ant.properties['hostName'] = appProperties['hostName']
}

install {
    dependsOn prepareTomcat
}

dependencies {

    compile "org.springframework:spring-tx:$project.springVersion",
            "org.springframework:spring-orm:$project.springVersion",
            "org.springframework:spring-jdbc:$project.springVersion",
            "org.springframework:spring-webmvc:$project.springVersion",
            "org.springframework.security:spring-security-web:$project.springSecurityVersion",
            "org.springframework.security:spring-security-config:$project.springSecurityVersion",
            "org.springframework.security:spring-security-core:$project.springSecurityVersion",
            "org.springframework.security:spring-security-cas:$project.springSecurityCasVersion",
            "org.apache.commons:commons-lang3:3.1",
            "javax.servlet:servlet-api:2.5",
            "org.mybatis:mybatis:3.1.1",
            "mysql:mysql-connector-java:5.1.21",
            "org.jasig.cas:cas-client-core:$project.casClientVersion",
            "joda-time:joda-time:2.1",
            "javax.servlet:jstl:1.2",
            "commons-codec:commons-codec:1.4",
            "commons-logging:commons-logging:1.1",
            "org.apache.santuario:xmlsec:1.4.0",
            "org.opensaml:opensaml:1.1",
            "cas:casclient:2.0.11",
            "ant-contrib:ant-contrib:20020829"


    testCompile "junit:junit:4.10",
            "org.mockito:mockito-core:1.8.4",
            "org.seleniumhq.selenium:selenium-java:2.24.1"

    functionalTestCompile "junit:junit:4.10",
            "org.mockito:mockito-core:1.8.4",
            "org.seleniumhq.selenium:selenium-java:2.24.1",
            "org.apache.commons:commons-lang3:3.1"
}

// create a task in gradle to read user, password from property, execute mysql command with SmartPoolDB.sql so that it populates the DB
task setup_database << {
    ant.exec(executable: "dbscripts/dbsetup.sh", failifexecutionfails: "true", failonerror: "true") {
        arg(value: appProperties['databaseName'])
        arg(value: appProperties['databaseHost'])
    }
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
}


